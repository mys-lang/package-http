from net.stcp.client import Client as StcpClient
from net.tcp.client import Client as TcpClient

class HttpError(Error):
    message: string

class Response:
    headers: {string: string}
    content: bytes

@trait
class _Io:

    def write(self, data: bytes):
        pass

    def read(self, size: u64) -> bytes:
        pass

class _TcpIo(_Io):
    client: TcpClient

    def write(self, data: bytes):
        self.client.write(data)

    def read(self, size: u64) -> bytes:
        return self.client.read(size)

class _StcpIo(_Io):
    client: StcpClient

    def write(self, data: bytes):
        self.client.write(data)

    def read(self, size: u64) -> bytes:
        return self.client.read(size)

def _read_line(io: _Io) -> string:
    line = b""

    while True:
        byte = io.read(1)

        if len(byte) != 1:
            raise HttpError("Handshake failed.")

        line += byte

        if len(line) < 2:
            continue

        if line[-2] == u8('\r') and line[-1] == u8('\n'):
            break

    return string(line)[:-2]

def _read_headers(io: _Io) -> {string: string}:
    headers = {}

    while True:
        line = _read_line(io)

        if len(line) == 0:
            break

        mo = line.match(re"^([^:]+): (.*)$")

        if mo is not None:
            headers[mo.group(1).lower()] = mo.group(2)

    return headers

def _execute(method: string,
             host: string,
             port: u32,
             path: string,
             secure: bool,
             headers: {string: string},
             data: bytes = None) -> Response:
    io: _Io = None

    if secure:
        client = StcpClient()
        client.connect(host, port)
        io = _StcpIo(client)
    else:
        client = TcpClient()
        client.connect(host, port)
        io = _TcpIo(client)

    if "host" not in headers:
        headers["host"] = host

    if "user-agent" not in headers:
        headers["user-agent"] = "mys/0.1.0"

    if "accept" not in headers:
        headers["accept"] = "*/*"

    if data is not None:
        headers["content-length"] = f"{len(data)}"

    request = f"{method} {path} HTTP/1.1\r\n"

    for name, value in headers:
        request += f"{name}: {value}\r\n"

    request += "\r\n"
    request_bytes = request.to_utf8()

    if data is not None:
        request_bytes += data

    io.write(request_bytes)
    line = _read_line(io)
    mo = line.match(re"^HTTP/1.1 200 OK$")

    if mo is None:
        raise HttpError(f"Unsuccessful status in response ({line}).")

    headers = _read_headers(io)
    content_length = headers.get("content-length", None)

    if content_length is None:
        content = b""

        while True:
            chunk_length = u64(_read_line(io), 16)

            if chunk_length == 0:
                break

            content += io.read(chunk_length)

            if len(_read_line(io)) != 0:
                raise HttpError("Bad chunked content in response.")
    else:
        content = io.read(u64(content_length))

    return Response(headers, content)

def get(host: string,
        port: u32 = 80,
        path: string = "/",
        secure: bool = False,
        headers: {string: string} = {}) -> Response:
    """Get given path from given address.

    """

    return _execute("GET", host, port, path, secure, headers)

def post(host: string,
         content: bytes,
         port: u32 = 80,
         path: string = "/",
         secure: bool = False,
         headers: {string: string} = {}) -> Response:
    """Post given path and content to given address.

    """

    return _execute("POST", host, port, path, secure, headers, content)
