from net.tcp.client import Client as TcpClient
from net.stcp.client import Client as StcpClient

class HttpError(Error):
    message: string

def hex2dec(hex: string) -> u32:
    dec: u32 = 0

    for ch in hex:
        dec *= 16

        if ch >= '0' and ch <= '9':
            dec += u32(ch - '0')
        elif ch >= 'a' and ch <= 'f':
            dec += 10 + u32(ch - 'a')
        elif ch >= 'A' and ch <= 'F':
            dec += 10 + u32(ch - 'A')
        else:
            raise HttpError("Bad size in chunked body response.")

    return dec

@trait
class _Io:

    def write(self, data: bytes):
        pass

    def read(self, size: u32) -> bytes:
        pass

class _TcpIo(_Io):
    client: TcpClient

    def write(self, data: bytes):
        self.client.write(data)

    def read(self, size: u32) -> bytes:
        return self.client.read(size)

class _StcpIo(_Io):
    client: StcpClient

    def write(self, data: bytes):
        self.client.write(data)

    def read(self, size: u32) -> bytes:
        return self.client.read(size)

def _read_line(io: _Io) -> string:
    line = b""

    while True:
        byte = io.read(1)

        if len(byte) != 1:
            raise HttpError("Handshake failed.")

        line += byte

        if len(line) < 2:
            continue

        if line[-2] == u8('\r') and line[-1] == u8('\n'):
            break

    return string(line)[:-2]

def _read_headers(io: _Io) -> {string: string}:
    headers: {string: string} = {}

    while True:
        line = _read_line(io)

        if len(line) == 0:
            break

        mo = line.match(re"^([^:]+): (.*)$")

        if mo is not None:
            headers[mo.group(1)] = mo.group(2)

    return headers

def _execute(method: string,
             host: string,
             port: u32,
             path: string,
             secure: bool,
             headers: {string: string},
             data: bytes = None) -> ({string: string}, bytes):
    io: _Io = None

    if secure:
        client = StcpClient()
        client.connect(host, port)
        io = _StcpIo(client)
    else:
        client = TcpClient()
        client.connect(host, port)
        io = _TcpIo(client)

    if "Host" not in headers:
        headers["Host"] = host

    if "User-Agent" not in headers:
        headers["User-Agent"] = "mys/0.1.0"

    if "Accept" not in headers:
        headers["Accept"] = "*/*"

    if data is not None:
        headers["Content-Length"] = f"{len(data)}"

    request = f"{method} {path} HTTP/1.1\r\n"

    for name, value in headers:
        request += f"{name}: {value}\r\n"

    request += "\r\n"
    request_bytes = request.to_utf8()

    if data is not None:
        request_bytes += data

    io.write(request_bytes)
    line = _read_line(io)
    mo = line.match(re"^HTTP/1.1 200 OK$")

    if mo is None:
        raise HttpError("Unsuccessful status in response.")

    headers = _read_headers(io)
    content_length = headers.get("Content-Length", None)

    if content_length is None:
        data = b""

        while True:
            chunk_length = hex2dec(_read_line(io))

            if chunk_length == 0:
                break

            data += io.read(chunk_length)

            if len(_read_line(io)) != 0:
                raise HttpError("Bad chunked data in response.")
    else:
        data = io.read(u32(content_length))

    return (headers, data)

def get(host: string,
        port: u32 = 80,
        path: string = "/",
        secure: bool = False,
        headers: {string: string} = {}) -> ({string: string}, bytes):
    """Get given path from given address. Returns a tuple of received
    headers and data.

    """

    return _execute("GET", host, port, path, secure, headers)

def post(host: string,
         data: bytes,
         port: u32 = 80,
         path: string = "/",
         secure: bool = False,
         headers: {string: string} = {}) -> ({string: string}, bytes):
    """Post given path and data to given address. Returns a tuple of
    received headers and data.

    """

    return _execute("POST", host, port, path, secure, headers, data)
