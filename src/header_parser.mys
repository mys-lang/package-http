from . import HttpError

_RE_REQUEST: regex = re"^(\w+) (([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))? HTTP/1.1$"
_RE_HEADER_LINE: regex = re"^([^:]+): (.*)$"
_HEADER_END: bytes = b"\r\n"

class Request:
    """A HTTP request.

    """

    method: string
    path: string
    query: string
    params: {string: string}
    fragment: string
    headers: {string: string}

class _HeaderParser:
    """Parses HTTP headers.

    """

    _header: bytes
    _offset: i64
    _size: i64

    func __init__(self, header: bytes):
        """Initialize the parser with given header buffer. Call reset() before
        reading from the header.

        """

        self._header = header
        self._offset = 0
        self._size = 0

    func parse_request(self, size: u64) -> Request:
        """Parse a request of given size from start of header buffer.

        """

        self._offset = 0
        self._size = i64(size)

        line = self._read_line()
        mo = line.match(_RE_REQUEST)

        if mo is None:
            raise HttpError(f"invalid header line '{line}'")

        query = mo.group(8)

        if query is None:
            params: {string: string} = {}
        else:
            params = parse_query(query)

        request = Request(mo.group(1),
                          mo.group(6),
                          query,
                          params,
                          mo.group(10),
                          self._parse_headers())

        if self._offset != self._size:
            raise HttpError("remaining header data")

        return request

    func _read_line(self) -> string:
        """Returns the next header line. Returns the empty string if no more
        lines are available.

        """

        pos = self._header.find(_HEADER_END, self._offset, self._size)
        offset = self._offset
        self._offset = pos + 2

        return string(self._header, offset, pos)

    func _parse_headers(self) -> {string: string}:
        headers = {}

        while True:
            line = self._read_line()

            if len(line) == 0:
                break

            mo = line.match(_RE_HEADER_LINE)

            if mo is None:
                raise HttpError(f"invalid header line '{line}'")

            headers[mo.group(1).lower()] = mo.group(2)

        return headers

func parse_request(header: bytes) -> Request:
    """Parse given request header.

    """

    return parse_request(header, len(header))

func parse_request(header: bytes, size: u64) -> Request:
    """Parse given request header.

    """

    parser = _HeaderParser(header)

    return parser.parse_request(size)

func parse_query(value: string) -> {string: string}:
    """Parse given parameters and return them as a dictionary.

    """

    params = {}

    for param in value.split('&'):
        if len(param) == 0:
            continue

        pos = param.find('=')

        if pos == -1:
            params[param] = ""
        else:
            params[param[0:pos]] = param[pos + 1:]

    return params

test request():
    header = (b"GET /statistics.html?foo#bar HTTP/1.1\r\n"
              b"Host: mys-lang.org\r\n"
              b"Cache-Control: no-cache\r\n"
              b"Referer: https://mys-lang.org/\r\n"
              b"Accept-Encoding: gzip, deflate, br\r\n"
              b"\r\n")
    request = parse_request(header)
    assert request.method == "GET"
    assert request.path == "/statistics.html"
    assert request.query == "foo"
    assert request.fragment == "bar"
    assert request.headers == {"accept-encoding": "gzip, deflate, br",
                               "referer": "https://mys-lang.org/",
                               "cache-control": "no-cache",
                               "host": "mys-lang.org"}

test request_no_query_nor_fragment():
    header = (b"GET / HTTP/1.1\r\n"
              b"\r\n")
    request = parse_request(header)
    assert request.method == "GET"
    assert request.path == "/"
    assert request.query is None
    assert request.params == {}
    assert request.fragment is None
    assert request.headers == {}

test request_with_fragment():
    header = (b"GET /#foo HTTP/1.1\r\n"
              b"\r\n")
    request = parse_request(header)
    assert request.method == "GET"
    assert request.path == "/"
    assert request.query is None
    assert request.params == {}
    assert request.fragment == "foo"
    assert request.headers == {}

test request_with_query():
    header = (b"GET /?foo HTTP/1.1\r\n"
              b"\r\n")
    request = parse_request(header)
    assert request.method == "GET"
    assert request.path == "/"
    assert request.query == "foo"
    assert request.params == {"foo": ""}
    assert request.fragment is None
    assert request.headers == {}

test request_invalid_request_line():
    header = (b" GET /statistics.html HTTP/1.1\r\n"
              b"\r\n")

    try:
        message = ""
        parse_request(header)
    except HttpError as err:
        message = err.message

    assert message == "invalid header line ' GET /statistics.html HTTP/1.1'"

test request_invalid_header_line():
    header = (b"GET / HTTP/1.1\r\n"
              b"Host mys-lang.org\r\n"
              b"\r\n")

    try:
        message = ""
        parse_request(header)
    except HttpError as err:
        message = err.message

    assert message == "invalid header line 'Host mys-lang.org'"

test request_remaining_data():
    header = (b"GET / HTTP/1.1\r\n"
              b"Host: mys-lang.org\r\n"
              b"\r\n"
              b"\r\n")

    try:
        message = ""
        parse_request(header)
    except HttpError as err:
        message = err.message

    assert message == "remaining header data"

test request_with_size():
    header = (b"GET / HTTP/1.1\r\n"
              b"Host: mys-lang.org\r\n"
              b"\r\n"
              b"\r\n")
    request = parse_request(header, len(header) - 2)
    assert request.method == "GET"
    assert request.path == "/"
    assert request.query is None
    assert request.params == {}
    assert request.fragment is None
    assert request.headers == {"host": "mys-lang.org"}

test parse_query():
    assert parse_query("") == {}
    assert parse_query("a=10") == {"a": "10"}
    assert parse_query("a=10&foo=bar") == {"a": "10", "foo": "bar"}
    assert parse_query("a=3&bbb=123ffds&&s=&1&=2=3") == {"1": "",
                                                         "s": "",
                                                         "bbb": "123ffds",
                                                         "a": "3",
                                                         "": "2=3"}
