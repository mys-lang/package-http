from net.tcp.server import Server as TcpServer
from net.tcp.server import Client
from os.path import Path
from os.temporary import Directory as TemporaryDirectory
from http.header_parser import parse_request
from http import HttpError
from io.buffered_reader import BufferedReader
from fiber import Fiber
from http import get
from http import post

_HEADERS_END: bytes = b"\r\n\r\n"

enum Status:
    """HTTP response status codes.

    """

    Continue = 100
    Ok = 200
    Found = 302
    BadRequest = 400
    Unauthorized = 401
    NotFound = 404
    MethodNotAllowed = 405
    InternalServerError = 500

_STATUS_STRINGS: {i64: string} = {
    i64(Status.Continue): "Continue",
    i64(Status.Ok): "OK",
    i64(Status.Found): "Found",
    i64(Status.BadRequest): "Bad Request",
    i64(Status.Unauthorized): "Unauthorized",
    i64(Status.NotFound): "Not Found",
    i64(Status.MethodNotAllowed): "Method Not Allowed",
    i64(Status.InternalServerError): "Internal Server Error"
}

class ResponseError(Error):
    status: Status

trait _Path:

    func match(self, path: string) -> (bool, [string]):
        pass

class _StringPath(_Path):
    path: string

    func match(self, path: string) -> (bool, [string]):
        return (path == self.path, None)

class _RegexPath(_Path):
    _regex: regex

    func __init__(self, regex: regex):
        self._regex = regex

    func match(self, path: string) -> (bool, [string]):
        mo = self._regex.match(path)

        if mo is None:
            return (False, None)
        else:
            return (True, mo.groups())

trait Route:
    """A route.

    """

    func on_get(self, request: Request) -> Response:
        """Handle a GET request.

        """

        return EmptyResponse(Status.MethodNotAllowed)

    func on_post(self, request: Request) -> Response:
        """Handle a POST request.

        """

        return EmptyResponse(Status.MethodNotAllowed)

    func on_delete(self, request: Request) -> Response:
        """Handle a DELETE request.

        """

        return EmptyResponse(Status.MethodNotAllowed)

class Request:
    method: string
    path: string
    query: string
    params: {string: string}
    fragment: string
    headers: {string: string}
    matches: [string]

trait Response:
    """A response.

    """

    func write(self, client: Client):
        """Write the response to the client.

        """

class StringResponse(Response):
    status: Status
    data: string

    func __init__(self, data: string, status: Status = Status.Ok):
        self.status = status
        self.data = data

    func write(self, client: Client):
        body = self.data.to_utf8()
        client.write(f"HTTP/1.1 200 OK\r\n"
                     f"Content-Length: {body.length()}\r\n"
                     f"\r\n".to_utf8())
        client.write(body)

class FileResponse(Response):
    status: Status
    path: Path

    func __init__(self, path: Path, status: Status = Status.Ok):
        self.status = status
        self.path = path

    func write(self, client: Client):
        body = self.path.read_binary()
        client.write(f"HTTP/1.1 200 OK\r\n"
                     f"Content-Length: {body.length()}\r\n"
                     f"\r\n".to_utf8())
        client.write(body)

class EmptyResponse(Response):
    status: Status

    func __init__(self, status: Status = Status.Ok):
        self.status = status

    func write(self, client: Client):
        status = i64(self.status)
        client.write(f"HTTP/1.1 {status} {_STATUS_STRINGS[status]}\r\n\r\n".to_utf8())

class _Client(Fiber):
    client: Client
    routes: [(_Path, Route)]

    func run(self):
        try:
            self._serve()
        except Error:
            pass

        self.client.disconnect()

    func _serve(self):
        buffered_reader = BufferedReader(self.client, 1024)
        header = buffered_reader.read_until(_HEADERS_END)

        if header is None:
            return

        request_header = parse_request(header, header.length())
        request = Request(request_header.method,
                          request_header.path,
                          request_header.query,
                          request_header.params,
                          request_header.fragment,
                          request_header.headers,
                          None)

        try:
            response = self._handle_request(request)
        except ResponseError as error:
            response: Response = EmptyResponse(error.status)
        except Error:
            response: Response = EmptyResponse(Status.InternalServerError)

        response.write(self.client)

    func _handle_request(self, request: Request) -> Response:
        route, request.matches = self._find_route(request.path)

        match request.method:
            case "GET":
                return route.on_get(request)
            case "POST":
                return route.on_post(request)
            case "DELETE":
                return route.on_delete(request)
            case _:
                return EmptyResponse(Status.MethodNotAllowed)

    func _find_route(self, request_path: string) -> (Route, [string]):
        for path, route in self.routes:
            is_match, matches = path.match(request_path)

            if is_match:
                return route, matches

        raise ResponseError(Status.NotFound)


class Server:
    """A HTTP server.

    """

    _routes: [(_Path, Route)]

    func __init__(self):
        self._routes = []

    func add_route(self, path: string, route: Route):
        """Add a route for given path.

        """

        self._routes.append((_StringPath(path), route))

    # ToDo: Should be overloaded add_route().
    func add_route_regex(self, path: regex, route: Route):
        """Add a route for given path.

        """

        self._routes.append((_RegexPath(path), route))

    func serve(self, port: u32):
        """Serve HTTP requests.

        """

        server = TcpServer()
        server.listen(port)

        while True:
            client = server.accept()
            client_fiber = _Client(client, self._routes)
            client_fiber.start()

class _GetStringRoute(Route):

    func on_get(self, request: Request) -> Response:
        return StringResponse("Hello!")

class _GetFileRoute(Route):

    func on_get(self, request: Request) -> Response:
        return FileResponse(Path(request.path))

class _BasicServer(Fiber):
    port: u32

    func run(self):
        try:
            server = Server()
            server.add_route("/index.html", _GetStringRoute())
            server.add_route_regex(re"/.*", _GetFileRoute())
            server.serve(self.port)
        except:
            pass

test basic():
    port: u32 = 50654
    server = _BasicServer(port)
    server.start()
    assert get("localhost", port, "/index.html").content == b"Hello!"

    tmpdir = TemporaryDirectory()
    a_txt = tmpdir.path().join("a.txt")
    a_txt.write_text("Foo!")
    assert get("localhost", port, a_txt.to_string()).content == b"Foo!"
    b_txt = tmpdir.path().join("b.txt")
    b_txt.write_text("Bar!")
    assert get("localhost", port, b_txt.to_string()).content == b"Bar!"

    try:
        post("localhost", b"", port)
        assert False
    except HttpError as error:
        assert "405 Method Not Allowed" in error.message

    server.cancel()
    server.join()
