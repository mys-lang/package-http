# Based on https://github.com/BafS/hn-top.

from argparse import Parser
from http import get
from json import decode as json_decode

API: string = "https://hacker-news.firebaseio.com/v0"

class Story:
    id: i64
    title: string
    score: i64
    by: string
    descendants: i64

func http_get(path: string) -> string:
    return string(get("hacker-news.firebaseio.com",
                      path=f"/v0/{path}",
                      port=443,
                      secure=True).content)

func fetch_story(id: i64) -> Story:
    response = json_decode(http_get(f"item/{id}.json")).object()

    if "descendants" in response:
        descendants = response["descendants"].integer()
    else:
        descendants = 0

    return Story(response["id"].integer(),
                 response["title"].string(),
                 response["score"].integer(),
                 response["by"].string(),
                 descendants)

func fetch_top_stories(count: i64) -> [Story]:
    response = json_decode(http_get(f"topstories.json"))
    stories: [Story] = []

    for id in slice(response.list(), 0, count):
        stories.append(fetch_story(id.integer()))

    return stories

func main(argv: [string]):
    parser = Parser("hn_top")
    parser.add_option("--count",
                      "-c",
                      default="5",
                      help="Number of top news to show (default: 5).")
    args = parser.parse(argv)

    count = i64(args.value_of("--count"))
    indent = "  " + "".join([" " for _ in range(str(count).length())])

    for i, story in enumerate(fetch_top_stories(count)):
        print(f"{i + 1}. {story.title}")
        print(f"{indent}score: {story.score}    comments: {story.descendants}    "
              f"user: {story.by}")
        print(f"{indent}url: https://news.ycombinator.com/item?id={story.id}")
